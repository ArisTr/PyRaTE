#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=#
#  NAME:                                                                     #
#                                                                            #
#  dust.py                                                                   #
#                                                                            #
#                                                                            #
#  DESCRIPTION:                                                              #
#                                                                            #
#  Python script for calculating the absorption/extinction coefficients      #
#  for a specific frequency. 3 types of spherical grains are assumed.        #
#                                                                            #
#     i.) ices (dirty ices + coated silicates)                               #
#    ii.) silicates                                                          #
#   iii.) amorphous carbon                                                   #
#                                                                            #
#  Optical data has been taken from Preibisch et al. (1993)                  #
#                                                                            #
#   http://articles.adsabs.harvard.edu/full/1993A%26A...279..577P            #
#                                                                            #
#  but the amount of dust has been reduced to be compatible with the         #
#  Pollack et al. (1985) model used in the hydrodynamical calculations.      #
#                                                                            #
#   http://www.sciencedirect.com/science/article/pii/0019103585900697        #
#                                                                            #
# 1. From freq -> Q_abs & Q_ext                                              #
# 2. k_abs=(n1*Q_abs1*pi*r1^2+n2*Q_abs2*pi*r2^2+n3*Q_abs3*pi*r3^2)/(n1+n2+n3)#
# 3. k_ext=(n1*Q_ext1*pi*r1^2+n2*Q_ext2*pi*r2^2+n3*Q_ext3*pi*r3^2)/(n1+n2+n3)#
# 4. Qext = Qscat + Qabsorp                                                  #
#                                                                            #
#                                                                            #
#  PARAMETERS:                                                               #
#                                                                            #
#     Input : freq, T, dens_grid_point, B_v                                  #
#     Output : S_c (continuum source function), k_ext (opacity)              #
#                                                                            #
#  AUTHORS:                                                                  #
#                                                                            #
#  Aris E. Tritsis                                                           #
#  (aris.tritsis@epfl.ch)                                                    #
#                                                                            #
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=#

#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=#
import numpy as np                                                           #
from scipy.interpolate import interp1d                                       #
from scipy.constants import m_p, h, c, k                                     #
                                                                             #
amu=2.4237981621576                                                          #
m_p = m_p * 1e+3                                                             #
h=h*1.e+7                                                                    #
c=c*1.e+2                                                                    #
K_b=k*1.e+7                                                                  #
#- - - - - - - - - - - - - -abundance- - - - - - - - - - - - - - - - - - - - #
#- - - - - - -This is actually grain mass and not abundance!- - - - - - - - -#
abundance_g_sp1=12.001                                                       # 12.218
abundance_g_sp2=01.000                                                       #
abundance_g_sp3=14.170                                                       # 14.387
                                                                             #
abundance_g_log=np.array([abundance_g_sp1, abundance_g_sp2, abundance_g_sp3])#
abundance_g=10.**abundance_g_log                                             #
#- - - - - - - - - - - radius=10^{radius_g_sp*} - - - - - - - - - - - - - - -#
#- - - - -This starts off as radius but is the area afterwords- - - - - - - -#
radius_g_sp1=-5.222                                                          #
radius_g_sp2=-5.281                                                          #
radius_g_sp3=-6.024                                                          #
                                                                             #
radius_g_log=np.array([radius_g_sp1, radius_g_sp2, radius_g_sp3])            #
radius_g=10.**(radius_g_log)                                                 #
radius_g=np.pi*radius_g**2.                                                  #
#- - - - -sublimation temperature=10^{sublimation_T_g_sp1*}- - - - - - - - - #
sublimation_T_g_sp1=2.097                                                    #
sublimation_T_g_sp2=3.176                                                    #
sublimation_T_g_sp3=3.301                                                    #
                                                                             #
sublimation_T_g_log=np.array([sublimation_T_g_sp1, sublimation_T_g_sp2, sublimation_T_g_sp3])
sublimation_T_g=10.**sublimation_T_g_log                                     #
#- - -This is a parameter that controls how the varius dust components- - - -#
#- - - -change from one species to another depending the temperature- - - - -#
fract_g_sp1 = 0.0                                                            #
fract_g_sp2 = 0.5                                                            #
fract_g_sp3 = 11.20                                                          #
                                                                             #
fract_g=np.array([fract_g_sp1, fract_g_sp2, fract_g_sp3])                    #
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=#

#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=#
#                                                                            #
#          /\                                                                #
#         /  \                                                               #
#        / || \           DATA FOR DUST GRAIN MODEL ADOPTED                  #
#       /  ||  \                                                             #
#      /   ..   \             !!!   DO NOT TOUCH   !!!                       #
#     /          \                                                           #
#     ------------                                                           #
#                                                                            #
#                                                                            #
#         Qext = efficiency factor for extinction                            #
#         Qext = Qsca + Qabs                                                 #
#         albedo = Qsca/Qext                                                 #
#                                                                            #
freqs=[2.00000E+00, 3.33333E+00, 3.70370E+00, 5.00000E+00, 7.69231E+00,      #
 9.09091E+00, 1.25000E+01, 1.66667E+01, 1.77828E+01, 2.22222E+01,            #
 2.85710E+01, 3.20000E+01, 4.00000E+01, 5.00000E+01, 6.40000E+01,            #
 8.00000E+01, 1.00000E+02, 1.20000E+02, 1.40000E+02, 1.66667E+02,            #
 1.80000E+02, 2.00000E+02, 2.20000E+02, 2.50000E+02, 3.00000E+02,            #
 3.50000E+02, 4.00000E+02, 4.76190E+02, 5.40000E+02, 6.50000E+02,            #
 7.70000E+02, 9.43396E+02, 9.95250E+02, 1.05250E+03, 1.15250E+03,            #
 1.30000E+03, 1.50000E+03, 1.80000E+03, 2.00000E+03, 2.50000E+03,            #
 2.77777E+03, 2.90000E+03, 3.10000E+03, 3.25730E+03, 3.35730E+03,            #
 3.80000E+03, 4.50450E+03, 5.20000E+03, 6.00000E+03, 7.00000E+03,            #
 8.00000E+03, 1.00000E+04, 1.11111E+04, 1.47059E+04, 1.81818E+04,            #
 2.29885E+04, 2.85714E+04, 3.57143E+04, 4.16667E+04, 4.60000E+04,            #
 4.80000E+04, 5.88235E+04, 7.14286E+04, 1.00000E+05]                         #
                                                                             #
                                                                             #
Qext1=[8.27489E-07, 2.02616E-06, 2.44296E-06, 4.18020E-06, 9.13350E-06,      #
  1.24081E-05, 2.23674E-05, 4.04385E-05, 4.61024E-05, 7.30494E-05,           #
  1.21229E-04, 1.51303E-04, 2.35879E-04, 3.62494E-04, 5.72686E-04,           #
  8.70621E-04, 1.41357E-03, 2.27443E-03, 3.25876E-03, 4.66608E-03,           #
  5.34037E-03, 7.17867E-03, 9.51324E-03, 1.09013E-02, 1.22257E-02,           #
  1.55723E-02, 2.03591E-02, 2.92170E-02, 3.51293E-02, 2.85351E-02,           #
  3.85253E-02, 7.58988E-02, 8.60842E-02, 9.05677E-02, 5.08731E-02,           #
  2.00234E-02, 1.41722E-02, 1.55068E-02, 1.78970E-02, 2.88108E-02,           #
  3.77510E-02, 4.22064E-02, 6.00223E-02, 7.91517E-02, 8.38710E-02,           #
  5.84425E-02, 7.88446E-02, 1.02178E-01, 1.21741E-01, 1.60265E-01,           #
  1.91499E-01, 2.72786E-01, 3.14100E-01, 4.75036E-01, 6.14420E-01,           #
  8.86304E-01, 1.24287E+00, 1.60431E+00, 2.17989E+00, 2.35907E+00,           #
  2.41101E+00, 2.99702E+00, 2.55485E+00, 2.32977E+00]                        #
                                                                             #
albedo1=[3.92246E-08, 1.23610E-07, 1.56259E-07, 3.03332E-07, 7.77812E-07,    #
  1.11697E-06, 2.21502E-06, 3.87163E-06, 4.40139E-06, 6.77444E-06,           #
  1.11414E-05, 1.40460E-05, 2.19783E-05, 3.48768E-05, 5.92757E-05,           #
  9.54988E-05, 1.46429E-04, 1.89017E-04, 2.44381E-04, 3.33987E-04,           #
  3.99728E-04, 4.61869E-04, 4.91212E-04, 6.17219E-04, 1.10168E-03,           #
  1.63331E-03, 2.12169E-03, 2.73240E-03, 3.07663E-03, 5.96621E-03,           #
  1.18191E-02, 1.13103E-02, 1.03595E-02, 8.77175E-03, 6.75705E-03,           #
  2.41256E-02, 1.13157E-01, 2.44006E-01, 3.36055E-01, 4.85140E-01,           #
  4.95583E-01, 4.97225E-01, 4.23542E-01, 3.20571E-01, 2.99108E-01,           #
  6.48106E-01, 6.82296E-01, 7.11854E-01, 7.21794E-01, 7.38369E-01,           #
  7.47027E-01, 7.59237E-01, 7.66654E-01, 7.86210E-01, 7.94317E-01,           #
  8.11670E-01, 8.21779E-01, 8.33382E-01, 8.50948E-01, 8.38990E-01,           #
  8.15905E-01, 6.58103E-01, 4.68622E-01, 4.48626E-01]                        #
                                                                             #
Qext2=[4.56192E-07, 1.26718E-06, 1.56440E-06, 2.85106E-06, 6.74563E-06,      #
  9.42119E-06, 1.78219E-05, 3.17052E-05, 3.60991E-05, 5.64476E-05,           #
  9.35289E-05, 1.17433E-04, 1.84203E-04, 2.88866E-04, 4.77576E-04,           #
  7.57424E-04, 1.19947E-03, 1.76908E-03, 2.44707E-03, 3.56295E-03,           #
  4.19929E-03, 5.24419E-03, 6.40814E-03, 8.35551E-03, 1.21111E-02,           #
  1.66052E-02, 2.20507E-02, 3.24599E-02, 4.00471E-02, 2.86316E-02,           #
  3.31294E-02, 8.50940E-02, 1.02609E-01, 1.13549E-01, 6.16984E-02,           #
  2.03921E-02, 1.00506E-02, 1.17356E-02, 1.35383E-02, 2.16125E-02,           #
  2.72593E-02, 2.95763E-02, 3.32118E-02, 3.64441E-02, 3.88451E-02,           #
  5.23374E-02, 6.73230E-02, 9.06687E-02, 1.11919E-01, 1.39909E-01,           #
  1.76101E-01, 2.39293E-01, 2.90852E-01, 4.31671E-01, 5.74578E-01,           #
  8.52241E-01, 1.12880E+00, 1.59701E+00, 2.12380E+00, 2.52193E+00,           #
  2.57567E+00, 3.45300E+00, 2.82181E+00, 2.65350E+00]                        #
                                                                             #
albedo2=[5.03588E-08, 1.39890E-07, 1.72707E-07, 3.14778E-07, 7.45386E-07,    #
  1.04120E-06, 1.96752E-06, 3.49593E-06, 3.97950E-06, 6.20690E-06,           #
  1.02379E-05, 1.28347E-05, 1.99828E-05, 3.11464E-05, 5.06395E-05,           #
  7.80006E-05, 1.20776E-04, 1.69645E-04, 2.28264E-04, 3.13364E-04,           #
  3.61733E-04, 4.43295E-04, 5.24026E-04, 6.60989E-04, 9.37946E-04,           #
  1.26048E-03, 1.58995E-03, 1.98391E-03, 2.13900E-03, 3.88407E-03,           #
  1.01020E-02, 9.61017E-03, 8.68926E-03, 7.32209E-03, 4.26684E-03,           #
  1.08794E-02, 9.84504E-02, 2.30535E-01, 3.21401E-01, 4.89408E-01,           #
  5.57131E-01, 5.78124E-01, 6.05280E-01, 6.24653E-01, 6.36979E-01,           #
  6.89993E-01, 7.26025E-01, 7.54286E-01, 7.72155E-01, 7.77858E-01,           #
  7.96308E-01, 8.01552E-01, 8.15916E-01, 8.22345E-01, 8.38710E-01,           #
  8.49167E-01, 8.51083E-01, 8.69265E-01, 8.75804E-01, 8.64243E-01,           #
  8.36545E-01, 6.49163E-01, 4.72962E-01, 4.85557E-01]                        #
                                                                             #
Qext3=[5.71229E-07, 9.52047E-07, 1.05783E-06, 1.42807E-06, 2.19704E-06,      #
  2.59650E-06, 3.57018E-06, 4.76025E-06, 5.07902E-06, 6.34698E-06,           #
  8.16030E-06, 9.13967E-06, 1.14246E-05, 1.42807E-05, 1.82810E-05,           #
  2.28568E-05, 2.85795E-05, 3.43091E-05, 4.00475E-05, 4.77133E-05,           #
  5.15572E-05, 5.73318E-05, 6.31133E-05, 7.18237E-05, 8.64103E-05,           #
  1.01118E-04, 1.15967E-04, 1.38911E-04, 1.58468E-04, 1.93040E-04,           #
  2.32214E-04, 2.92067E-04, 3.10822E-04, 3.32034E-04, 3.70449E-04,           #
  4.30584E-04, 5.19593E-04, 6.71937E-04, 7.88021E-04, 1.13900E-03,           #
  1.37757E-03, 1.49369E-03, 1.69948E-03, 1.87590E-03, 1.99506E-03,           #
  2.59279E-03, 3.80808E-03, 5.37159E-03, 7.67012E-03, 1.13421E-02,           #
  1.58829E-02, 2.71114E-02, 3.42294E-02, 6.01987E-02, 8.88036E-02,           #
  1.32586E-01, 1.88654E-01, 2.68521E-01, 3.42946E-01, 4.01815E-01,           #
  4.30197E-01, 5.92534E-01, 7.89627E-01, 1.24580E+00]                        #
                                                                             #
albedo3=[6.24978E-13, 2.89341E-12, 3.96900E-12, 9.76529E-12, 3.55586E-11,    #
  5.86944E-11, 1.52583E-10, 3.61680E-10, 4.39313E-10, 8.57307E-10,           #
  1.82201E-09, 2.55991E-09, 4.99983E-09, 9.76529E-09, 2.04775E-08,           #
  3.99853E-08, 7.80732E-08, 1.34857E-07, 2.14039E-07, 3.60843E-07,           #
  4.54317E-07, 6.22707E-07, 8.28190E-07, 1.21354E-06, 2.09162E-06,           #
  3.31140E-06, 4.92581E-06, 8.25966E-06, 1.19734E-05, 2.06350E-05,           #
  3.37825E-05, 6.05262E-05, 7.04496E-05, 8.24859E-05, 1.06300E-04,           #
  1.48066E-04, 2.17522E-04, 3.48882E-04, 4.53516E-04, 7.66535E-04,           #
  9.66423E-04, 1.05907E-03, 1.21590E-03, 1.34320E-03, 1.42569E-03,           #
  1.80261E-03, 2.42929E-03, 3.06841E-03, 3.82767E-03, 4.83433E-03,           #
  5.94951E-03, 8.72100E-03, 1.06808E-02, 1.94455E-02, 3.18659E-02,           #
  5.66891E-02, 9.84279E-02, 1.72824E-01, 2.48363E-01, 3.05788E-01,           #
  3.31709E-01, 4.52271E-01, 5.45765E-01, 6.59292E-01]                        #
                                                                             #
f1ext=interp1d(freqs, Qext1, kind='linear')                                  #
f1alb=interp1d(freqs, albedo1, kind='linear')                                #
f2ext=interp1d(freqs, Qext2, kind='linear')                                  #
f2alb=interp1d(freqs, albedo2, kind='linear')                                #
f3ext=interp1d(freqs, Qext3, kind='linear')                                  #
f3alb=interp1d(freqs, albedo3, kind='linear')                                #
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=#

#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=#
#                                                                            #
#     Calculate the exponent in Planck's function and take cases to see if   #
#            it reduces to Wien's law or Rayleigh-Jeans law                  #
#                                                                            #
def planck(freq, T):                                                         #
	                                                                     #
	exponent=h*freq/(K_b*T)                                              #
	                                                                     #
	if exponent>=0.1:                                                    #
		                                                             #
		B_v= 2.*h*freq**3/c**2 * 1./(np.exp(exponent) - 1)           #
	                                                                     #
	#- - - -for (hv/kT)<1 compute B_v from from Rayleigh-Taylor's law- - #
	else:                                                                #
		                                                             #
		B_v=2.*freq**2 *K_b*T/c**2                                   #
		                                                             #
	return B_v                                                           #
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=#


#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=#
#         Give me freq, Temperature and species and I will return            #
def dust(freq, Tgp, densgp):                                                 #
	                                                                     #
	B_v = planck(freq, Tgp)                                              #
	                                                                     #
	densgp = densgp * m_p * amu                                          #
	                                                                     #
	k_ext=0.                                                             #
	#- - - - - - - - - -Continuum source function- - - - - - - - - - - - #
	S_c=0.                                                               #
	                                                                     #
	ZV=[]                                                                #
	                                                                     #
	grain_dens=[]                                                        #
	                                                                     #
	if freq < np.min(freqs):                                             #
		                                                             #
		S_c, k_ext = 0., 0.                                          #
	                                                                     #
	else:                                                                #
		for i in range (0, 3):                                       #
			                                                     #
			ZVtemp=max(0.,(1.-Tgp/sublimation_T_g[i])*20.)+1.E-10#
			                                                     #
			ZVtemp=min(1., ZVtemp)                               #
			                                                     #
			ZV.append(ZVtemp)                                    #
				                                             #
			if i==0:                                             #
				                                             #
				Q_ext1=f1ext(freq)                           #
				                                             #
				albedo_1=f1alb(freq)                         #
				                                             #
			elif i==1:                                           #
				                                             #
				Q_ext2=f2ext(freq)                           #
				                                             #
				albedo_2=f2alb(freq)                         #
				                                             #
			else:                                                #
				Q_ext3=f3ext(freq)                           #
				                                             #
				albedo_3=f3alb(freq)                         #
				                                             #
		Q_ext=np.array([Q_ext1, Q_ext2, Q_ext3])                     #
				                                             #
		albedo=np.array([albedo_1, albedo_2, albedo_3])              #
		                                                             #
		for i in range (0, 3):                                       #
			                                                     #
			grain_den=(abundance_g[i]+abundance_g[0]*(1.-ZV[0])*fract_g[i])* radius_g[i]* densgp
			                                                     #
			DEXT=ZV[i]*Q_ext[i]*grain_den                        #
			                                                     #
			k_ext=k_ext+DEXT                                     #
			                                                     #
			# Contributions of individual dust types to emission #
			S_c = S_c + B_v*DEXT*(1.-albedo[i])                  #
	                                                                     #
	return  S_c, k_ext                                                   #
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=#
